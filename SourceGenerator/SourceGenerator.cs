using Microsoft.CodeAnalysis;
using static System.Net.Mime.MediaTypeNames;
using System.Xml.Linq;
using System.IO;
using System.Text.Json;
using System.Collections.Generic;

namespace SourceGenerator
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {

        public void Execute(GeneratorExecutionContext context)
        {
            var files = Directory.GetFiles("nodes");
            List<string> list = new List<string>();
            File.WriteAllText("tt88t.txt", "");
            for (int i = 0; i < files.Length; i++)
            {
                //Получение ссылок и имени
                var path = files[i].Replace("\\", "\\\\");
               
                var name = files[i].Replace('\\', '-');
                name = name.Substring(6);
                name = name.Remove(name.IndexOf('.'));
                list.Add(JsonSerializer.Serialize(new { Name = name, Text = File.ReadAllText(path) }));  
            }

            string source = $@"// <auto-generated/>
                
using System;
using System.Collections.Generic;

namespace  ClassLibraryPart_1
{{
    
    public partial class Vault
    {{
        List<string> list = JsonSerializer.Deserialize<List<string>>(""{JsonSerializer.Serialize(list)}"");
        static partial void AutoDownload(int index, Vault v) 
        {{
            v.Add(JsonSerializer.Deserialize<Node>(list[i]));
///////
        }}
    }}
}}
";
            context.AddSource($"AutoDownload.g.cs", source);

        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}